-- | The full generic Style file for the linear algebra domain
-- | Author: Dor Ma'ayan
--   August, 2018

-- Global constants and sizes
const {
  const.vectorSpaceSize = 400.0
  const.axisSize = const.vectorSpaceSize * 0.4
  const.distVectorSpaces = 50.0
  const.scaleRatio = 200.0
}

-- Global RGB colors in common use
Colors {
  Colors.black = rgba(0.0, 0.0, 0.0, 1.0)
  Colors.lightBlue = rgba(0.1, 0.1, 0.9, 0.1)
  Colors.darkBlue = rgba(0.05, 0.05, 0.6, 0.5)
  Colors.lightGray = rgba(200.0,200.0,200.0,1.0)
    Colors.darkGray = rgba(0.4, 0.4, 0.4, 1.0)

    Colors.gray = rgba(0.8, 0.8, 0.8, 1.0)
    Colors.red = rgba(1.0, 0.0, 0.0, 1.0)
    Colors.pink = rgba(1.0, 0.4, 0.7, 1.0)
    Colors.yellow = rgba(1.0, 1.0, 0.0, 1.0)
    Colors.orange = rgba(1.0, 0.6, 0.0, 1.0)
    Colors.lightorange = rgba(1.0, 0.6, 0.0, 0.25)
    Colors.green = rgba(0.0, 1.0, 0.0, 1.0)
    Colors.blue = rgba(0.0, 0.0, 1.0, 1.0)
    Colors.sky = rgba(0.325, 0.718, 0.769, 1.0)
    Colors.lightsky = rgba(0.325, 0.718, 0.769, 0.25)
    Colors.lightblue = rgba(0.0, 0.0, 1.0, 0.25)
    Colors.cyan = rgba(0.0, 1.0, 1.0, 1.0)
    Colors.purple = rgba(0.5, 0.0, 0.5, 1.0)
    Colors.white = rgba(1.0, 1.0, 1.0, 1.0)
    Colors.none = rgba(0.0, 0.0, 0.0, 0.0)
    Colors.bluegreen = rgba(0.44, 0.68, 0.60, 1.0)
}

VectorSpace U {
 U.thickness = 2.0
 U.axisColor = Colors.darkGray

  U.shape = Square {
    side = const.vectorSpaceSize
    color = Colors.lightBlue
  }


   U.textX = Text {
     string = "x"
     color = Colors.darkGray
   }

   U.textY = Text {
     string = "y"
     color = Colors.darkGray
   }

   /*
   U.perpMark = Arc {
      x = U.shape.x
      y = U.shape.y
      size = 10
      rotation = 0
      isRight = "true"
      color = Colors.black
   }
   */

   -- TODO: double-headed arrows
   U.xAxisRight = Arrow {
      startX = U.shape.x
      startY = U.shape.y
      endX = U.shape.x + const.axisSize
      endY = U.shape.y
      thickness = U.thickness
      color = U.axisColor
   }

   U.xAxisLeft = Arrow {
      startX = U.shape.x
      startY = U.shape.y
      endX = U.shape.x - const.axisSize
      endY = U.shape.y
      thickness = U.thickness
      color = U.axisColor
   }

   U.yAxisUp = Arrow {
      startX = U.shape.x
      startY = U.shape.y
      endX = U.shape.x
      endY = U.shape.y + const.axisSize
      thickness = U.thickness
      color = U.axisColor
   }

   U.yAxisDown = Arrow {
      startX = U.shape.x
      startY = U.shape.y
      endX = U.shape.x
      endY = U.shape.y - const.axisSize
      thickness = U.thickness
      color = U.axisColor
   }

   U.text = Text {
     string = U.label
     x = U.shape.x - const.axisSize
     y = U.shape.y + const.axisSize
     color = U.axisColor
   }

   U.xLabelLocation = ensure nearHead(U.xAxisRight, U.textX, 20.0, 0.0)
   U.yLabelLocation = ensure nearHead(U.yAxisUp, U.textY, 0.0, 20.0)
}

-- TODO: generates too many constraints?

VectorSpace U; VectorSpace V {
    LOCAL.sameHeight = ensure sameHeight(U.shape, V.shape)
    LOCAL.nonIntersect = ensure disjoint(U.shape, V.shape)
    --V.shape.y = U.shape.y
    --V.shape.x = U.shape.x + const.vectorSpaceSize / 2.0 + const.distVectorSpaces
}

Vector v
with VectorSpace U
where In(v,U) {
   --v.endXTest = OPTIMIZED
   --v.endYTest = OPTIMIZED
   v.containFn = ensure contains(U.shape, v.shape)
   v.containLabel = ensure contains(U.shape, v.text)
   v.labelLocation = ensure nearHead(v.shape, v.text, 0.0 , 30.0)

  v.text = Text {
    string = v.label
    color = v.shape.color
  }

  v.shape = Arrow {
    startX = U.shape.x
    startY = U.shape.y
    -- endX = v.endXTest / const.scaleRatio
    -- endY = v.endYTest / const.scaleRatio
    thickness = 3.0
  }

  v.layeringText1 = v.text above U.xAxisRight
  v.layeringText2 = v.text above U.xAxisLeft
  v.layeringText3 = v.text above U.yAxisUp
  v.layeringText4 = v.text above U.yAxisDown
}

Vector u
with Vector v; VectorSpace U
where u := neg(v); In(v,U); In(u, U) {
  u.shape.endX = 2.0 * v.shape.startX - v.shape.endX
  u.shape.endY = 2.0 * v.shape.startY - v.shape.endY
}

Vector u
with Vector v; Vector w; VectorSpace U
where u := addV(v,w); In(u, U); In(v, U); In(w, U) {
   u.shape.endX = v.shape.endX + w.shape.endX - U.shape.x
   u.shape.endY = v.shape.endY + w.shape.endY - U.shape.y

    u.slider_v = Arrow {
     endX = u.shape.endX
     endY = u.shape.endY

     startX = w.shape.endX
     startY = w.shape.endY
     thickness = 1.5
     color = setOpacity(v.shape.color, 0.5)
     style = "dashed"
    }

    u.slider_w = Arrow {
       endX = u.shape.endX
       endY = u.shape.endY

       startX = v.shape.endX
       startY = v.shape.endY
       thickness = 1.5
       color = setOpacity(w.shape.color, 0.5)
       style = "dashed"
    }
}

LinearMap f
with VectorSpace U; VectorSpace V
where From(f,U,V) {
   /* f.shape = Arrow {
      startX = U.shape.x
      startY = U.shape.y + const.vectorSpaceSize/2.0
      endX = V.shape.x
      endY = V.shape.y + const.vectorSpaceSize/2.0
      style = "curved"
      rotation = 0.0
   } */

   f.shape = Curve {
     pathData = makeCurve(U.shape.x + const.vectorSpaceSize/2.0, U.shape.y, V.shape.x - const.vectorSpaceSize/2.0, V.shape.y, 0.0, 30.0)
     fill = Colors.none
     strokeWidth = 1.5
     right-arrowhead = True
   }

   f.text = Text {
     string = f.label
     x = (U.shape.x + V.shape.x) / 2.0
     y = U.shape.y + 50.0
     color = f.shape.color
   }

   f.orderFn = ensure lessThan(U.shape.x + 20.0, V.shape.x)
}

-- | Sclar is not visualized in any concrete way but insteat it contains a
--   Real value
Scalar c {
  c.val = generateRandomReal()
}

Scalar c
with Vector a; Vector b; VectorSpace U
where c := determinant(a,b); In(a,U); In(b,U) {
   c.shape = Curve {
   	   pathData = makeRegionPath(a.shape, b.shape)
	   strokeWidth = 0.0
	   fill = setOpacity(Colors.sky, 0.25)
   }

/* c.shape = Parallelogram {
      x = U.shape.x
      y = U.shape.y
      lengthX = len(a.shape)
      lengthY = len(b.shape)
      angle = calcVectorsAngle(a.shape.startX,a.shape.startY,a.shape.endX,a.shape.endY, b.shape.startX,b.shape.startY,b.shape.endX,b.shape.endY)
      rotation = calcVectorsAngleWithOrigin(a.shape.startX,a.shape.startY,a.shape.endX,a.shape.endY, b.shape.startX,b.shape.startY,b.shape.endX,b.shape.endY)
      stroke-style = "dashed"
   } */

   c.text = Text {
     string = c.label
     -- Normalize for origin
     x = (a.shape.endX + b.shape.endX - a.shape.startX) / 2.0
     y = (a.shape.endY + b.shape.endY - a.shape.startY) / 2.0
     color = Colors.sky
   }

   c.layering = c.text above c.shape
}

Scalar c
with Vector a; Vector b; VectorSpace U
where c := innerProduct(a,b); In(a,U); In(b,U) {
  override c.val = len(a.shape) * calcVectorsAngleCos(a.shape.startX,a.shape.startY,a.shape.endX,a.shape.endY, b.shape.startX,b.shape.startY,b.shape.endX,b.shape.endY) / 200.0
  c.line1 = Line {
     startX = b.shape.startX
     startY = b.shape.startY
     endX =  b.shape.endX * c.val - b.shape.startX * (c.val - 1.0)
     endY = b.shape.endY * c.val - b.shape.startY * (c.val - 1.0)
     thickness = 2.5
     style = "dashed"
  }

  c.line2 = Line {
     startX = a.shape.endX
     startY = a.shape.endY
     endX = b.shape.endX * c.val - b.shape.startX * (c.val - 1.0)
     endY = b.shape.endY * c.val - b.shape.startY * (c.val - 1.0)
     thickness = 2.5
     style = "dashed"
  }

  /*
    c.line1 =
    u.shape.endX = v.shape.endX * c.val - v.shape.startX * (c.val - 1.0)
    u.shape.endY = v.shape.endY * c.val - v.shape.startY * (c.val - 1.0)
    c.line1 =
    */
}

Scalar c
with Vector a;  VectorSpace U
where c := norm(a); In(a,U) {
   c.norm = len(a.shape)
   override c.val = c.norm / const.scaleRatio --calcnorm(a.shape.startX,a.shape.startY,a.shape.endX,a.shape.endY)

   c.padding = 20.0

   -- c.shape = Brace {
   c.shape = Line {
     startX = a.shape.startX
     startY = a.shape.startY + c.padding
     endX = a.shape.endX
     endY = a.shape.endY + c.padding
     thickness = 1.5
     color = setOpacity(a.shape.color, 0.75)
   }

   c.text = Text {
     string = c.label
     x = midpointX(c.shape) + c.padding
     y = midpointY(c.shape) + c.padding
     color = c.shape.color
   }
}

Vector u
with Scalar c; VectorSpace U; Vector v
where u := scale(c,v); In(u,U); In(v,U){
    u.shape.endX = v.shape.endX * c.val - v.shape.startX * (c.val - 1.0)
    u.shape.endY = v.shape.endY * c.val - v.shape.startY * (c.val - 1.0)

    -- u.shape.color = setOpacity(v.shape.color, 0.75)

    c.layeringScale = u.shape above v.shape
}
